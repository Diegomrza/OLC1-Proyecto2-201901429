/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,11],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[5,15,17,18,19,20,24,25,29,30,34,36,37],$Vc=[1,28],$Vd=[1,47],$Ve=[1,40],$Vf=[1,39],$Vg=[1,41],$Vh=[1,42],$Vi=[1,43],$Vj=[1,44],$Vk=[1,45],$Vl=[1,46],$Vm=[1,53],$Vn=[14,21,23],$Vo=[1,69],$Vp=[1,68],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[14,23,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,60,61],$VF=[1,87],$VG=[23,28],$VH=[14,23,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,61],$VI=[1,127],$VJ=[14,23,28,39,40,45,46,47,48,49,50,51,52,53,61],$VK=[14,23,28,39,40,41,42,45,46,47,48,49,50,51,52,53,61],$VL=[14,23,28,45,46,51,52,53,61],$VM=[14,23,28,45,46,47,48,49,50,51,52,53,61],$VN=[14,23,28,51,52,61],$VO=[5,15,17,18,19,20,24,25,29,30,33,34,36,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"inicio":6,"asignacion":7,"declaracion":8,"print":9,"if":10,"while":11,"funcion":12,"llamadaFuncion":13,"PUNTO_Y_COMA":14,"INT":15,"declaracion_multiple":16,"DOUBLE":17,"CHAR":18,"BOOLEAN":19,"STRING":20,"IGUAL":21,"expresion":22,"COMA":23,"IDENTIFICADOR":24,"PRINT":25,"PAR_ABRE":26,"ListaExpr":27,"PAR_CIERRA":28,"PRINTLN":29,"IF":30,"statement":31,"elsE":32,"ELSE":33,"WHILE":34,"LL_ABRE":35,"LL_CIERRA":36,"FUNCTION":37,"parametros":38,"MENOS":39,"MAS":40,"POR":41,"DIVIDIR":42,"POTENCIA":43,"MODULO":44,"IGUAL_IGUAL":45,"DIFERENTE":46,"MAYOR_IGUAL":47,"MENOR_IGUAL":48,"MAYOR":49,"MENOR":50,"AND":51,"OR":52,"NOT":53,"CADENA":54,"ENTERO":55,"DECIMAL":56,"TRUE":57,"FALSE":58,"CARACTER":59,"QUESTION":60,"DOS_PUNTOS":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"PUNTO_Y_COMA",15:"INT",17:"DOUBLE",18:"CHAR",19:"BOOLEAN",20:"STRING",21:"IGUAL",23:"COMA",24:"IDENTIFICADOR",25:"PRINT",26:"PAR_ABRE",28:"PAR_CIERRA",29:"PRINTLN",30:"IF",33:"ELSE",34:"WHILE",35:"LL_ABRE",36:"LL_CIERRA",37:"FUNCTION",39:"MENOS",40:"MAS",41:"POR",42:"DIVIDIR",43:"POTENCIA",44:"MODULO",45:"IGUAL_IGUAL",46:"DIFERENTE",47:"MAYOR_IGUAL",48:"MENOR_IGUAL",49:"MAYOR",50:"MENOR",51:"AND",52:"OR",53:"NOT",54:"CADENA",55:"ENTERO",56:"DECIMAL",57:"TRUE",58:"FALSE",59:"CARACTER",60:"QUESTION",61:"DOS_PUNTOS"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,5],[8,5],[8,5],[8,5],[8,5],[16,3],[16,1],[7,4],[9,5],[9,5],[27,3],[27,1],[10,6],[32,2],[32,2],[32,0],[11,5],[31,3],[31,2],[12,5],[12,6],[38,3],[38,1],[13,3],[13,4],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]
break;
case 11:
   
            this.$ = new Declaracion($$[$0-1], new Literal(0, TipoLiteral.ENTERO ,_$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column, 0); 
        
break;
case 12:
 
            this.$ = new Declaracion($$[$0-1], new Literal(0.0, TipoLiteral.DOBLE ,_$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column, 0);
        
break;
case 13:
 
            this.$ = new Declaracion($$[$0-1], new Literal("\u0000", TipoLiteral.CARACTER ,_$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column, 0); 
        
break;
case 14:
 
            this.$ = new Declaracion($$[$0-1], new Literal(true, TipoLiteral.BOOLEAN ,_$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column, 0); 
        
break;
case 15:
 
            this.$ = new Declaracion($$[$0-1], new Literal("", TipoLiteral.CADENA ,_$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column, 0);
        
break;
case 16:

            if ($$[$0-1].tipo == TipoLiteral.ENTERO) {
                this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, 0);
            } else {
                throw new Error_(_$[$0-4].first_line, _$[$0-4].first_column, 'Semantico', `no se puede asignar un tipo ${$$[$0-1].tipo} a un int`);
            }
        
break;
case 17:

            if ($$[$0-1].tipo == TipoLiteral.DOBLE) {
                this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, 0);
            } else {
                throw new Error_(_$[$0-4].first_line, _$[$0-4].first_column, 'Semantico', `no se puede asignar un tipo ${$$[$0-1].tipo} a un double`);
            }
        
break;
case 18:

            if ($$[$0-1].tipo == TipoLiteral.CARACTER) {
                this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, 0);
            } else {
                throw new Error_(_$[$0-4].first_line, _$[$0-4].first_column, 'Semantico', `no se puede asignar un tipo ${$$[$0-1].tipo} a un char`);
            }
        
break;
case 19:

            if ($$[$0-1].tipo == TipoLiteral.BOOLEAN) {
                this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, 0);
            } else {
                throw new Error_(_$[$0-4].first_line, _$[$0-4].first_column, 'Semantico', `no se puede asignar un tipo ${$$[$0-1].tipo} a un boolean`);
            }
        
break;
case 20:

            if ($$[$0-1].tipo == TipoLiteral.CADENA) {
                this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, 0);
            } else {
                throw new Error_(_$[$0-4].first_line, _$[$0-4].first_column, 'Semantico', `no se puede asignar un tipo ${$$[$0-1].tipo} a un string`);
            }
        
break;
case 21:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 22:
this.$ = [$$[$0]]
break;
case 23:
 this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, 1) 
break;
case 24:
 this.$ = new Print($$[$0-2], 0, _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 25:
 this.$ = new Print($$[$0-2], 1, _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 26:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 27: case 38:
 this.$ = [$$[$0]] 
break;
case 28:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 29: case 30:
 this.$ = $$[$0] 
break;
case 31:
 this.$ = null 
break;
case 32:
 this.$ = new While($$[$0-2], $$[$0],  _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 33:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 34:
 this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 35:
 this.$ = new Funcion($$[$0-3], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 36:
 this.$ = new Funcion($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 37:
 $$[$0-2].push($$[$0]); this.$ =$$[$0-2] 
break;
case 39:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 41:
 this.$ = new Aritmetica($$[$0], new Literal("-1", TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column), TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 42:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 43:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 44:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 45:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 46:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 47:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 48:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 49:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 50:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 51:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 52:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 53:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 54:
 this.$ = $$[$0-1] 
break;
case 55: case 56: case 57:
  
break;
case 58:
 this.$ = new Literal($$[$0], TipoLiteral.CADENA, _$[$0].first_line, _$[$0].first_column) 
break;
case 59:
 this.$ = new Literal($$[$0], TipoLiteral.ENTERO, _$[$0].first_line, _$[$0].first_column) 
break;
case 60:
 this.$ = new Literal($$[$0], TipoLiteral.DOBLE, _$[$0].first_line, _$[$0].first_column) 
break;
case 61: case 62:
 this.$ = new Literal($$[$0], TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column) 
break;
case 63:
 this.$ = new Literal($$[$0], TipoLiteral.CARACTER, _$[$0].first_line, _$[$0].first_column) 
break;
case 64:
 this.$ = new Acceso($$[$0].toLowerCase(), _$[$0].first_line, _$[$0].first_column) 
break;
case 65:
 this.$ = new IF($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:$V0,17:$V1,18:$V2,19:$V3,20:$V4,24:$V5,25:$V6,29:$V7,30:$V8,34:$V9,37:$Va},{1:[3]},{5:[1,22],6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:$V0,17:$V1,18:$V2,19:$V3,20:$V4,24:$V5,25:$V6,29:$V7,30:$V8,34:$V9,37:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),{14:[1,24]},{21:[1,25],26:[1,26]},{16:27,24:$Vc},{16:29,24:$Vc},{16:30,24:$Vc},{16:31,24:$Vc},{16:32,24:$Vc},{26:[1,33]},{26:[1,34]},{26:[1,35]},{26:[1,36]},{24:[1,37]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,10]),{22:38,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:50,24:$Vd,26:$Ve,27:49,28:[1,48],39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{14:[1,51],21:[1,52],23:$Vm},o($Vn,[2,22]),{14:[1,54],21:[1,55],23:$Vm},{14:[1,56],21:[1,57],23:$Vm},{14:[1,58],21:[1,59],23:$Vm},{14:[1,60],21:[1,61],23:$Vm},{22:50,24:$Vd,26:$Ve,27:62,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:50,24:$Vd,26:$Ve,27:63,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:64,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:65,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{26:[1,66]},{14:[1,67],39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD},{22:84,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:85,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},o($VE,[2,58]),o($VE,[2,59]),o($VE,[2,60]),o($VE,[2,61]),o($VE,[2,62]),o($VE,[2,63]),o($VE,[2,64]),{14:[2,39]},{23:$VF,28:[1,86]},o($VG,[2,27],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD}),o($Vb,[2,11]),{22:88,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{24:[1,89]},o($Vb,[2,12]),{22:90,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},o($Vb,[2,13]),{22:91,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},o($Vb,[2,14]),{22:92,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},o($Vb,[2,15]),{22:93,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{23:$VF,28:[1,94]},{23:$VF,28:[1,95]},{28:[1,96],39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD},{28:[1,97],39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD},{24:[1,100],28:[1,98],38:99},o($Vb,[2,23]),{22:101,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:102,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:103,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:104,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:105,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:106,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:107,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:108,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:109,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:110,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:111,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:112,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:113,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:114,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:115,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{22:116,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},o($VH,[2,41],{60:$VD}),{28:[1,117],39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD},{14:[2,40]},{22:118,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},{14:[1,119],39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD},o($Vn,[2,21]),{14:[1,120],39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD},{14:[1,121],39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD},{14:[1,122],39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD},{14:[1,123],39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD},{14:[1,124]},{14:[1,125]},{31:126,35:$VI},{31:128,35:$VI},{31:129,35:$VI},{23:[1,131],28:[1,130]},o($VG,[2,38]),o($VJ,[2,42],{41:$Vq,42:$Vr,43:$Vs,44:$Vt,60:$VD}),o($VJ,[2,43],{41:$Vq,42:$Vr,43:$Vs,44:$Vt,60:$VD}),o($VK,[2,44],{43:$Vs,44:$Vt,60:$VD}),o($VK,[2,45],{43:$Vs,44:$Vt,60:$VD}),o($VH,[2,46],{60:$VD}),o($VH,[2,47],{60:$VD}),o($VL,[2,48],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,47:$Vw,48:$Vx,49:$Vy,50:$Vz,60:$VD}),o($VL,[2,49],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,47:$Vw,48:$Vx,49:$Vy,50:$Vz,60:$VD}),o($VM,[2,50],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,60:$VD}),o($VM,[2,51],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,60:$VD}),o($VM,[2,52],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,60:$VD}),o($VM,[2,53],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,60:$VD}),o($VN,[2,55],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VC,60:$VD}),o([14,23,28,52,61],[2,56],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,53:$VC,60:$VD}),o($VN,[2,57],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VC,60:$VD}),{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD,61:[1,132]},o($VE,[2,54]),o($VG,[2,26],{39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD}),o($Vb,[2,16]),o($Vb,[2,17]),o($Vb,[2,18]),o($Vb,[2,19]),o($Vb,[2,20]),o($Vb,[2,24]),o($Vb,[2,25]),o($Vb,[2,31],{32:133,33:[1,134]}),{4:135,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:$V0,17:$V1,18:$V2,19:$V3,20:$V4,24:$V5,25:$V6,29:$V7,30:$V8,34:$V9,36:[1,136],37:$Va},o($Vb,[2,32]),o($Vb,[2,35]),{31:137,35:$VI},{24:[1,138]},{22:139,24:$Vd,26:$Ve,39:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl},o($Vb,[2,28]),{10:141,30:$V8,31:140,35:$VI},{6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:$V0,17:$V1,18:$V2,19:$V3,20:$V4,24:$V5,25:$V6,29:$V7,30:$V8,34:$V9,36:[1,142],37:$Va},o($VO,[2,34]),o($Vb,[2,36]),o($VG,[2,37]),{14:[1,143],39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,60:$VD},o($Vb,[2,29]),o($Vb,[2,30]),o($VO,[2,33]),o($VE,[2,65])],
defaultActions: {22:[2,1],48:[2,39],86:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Aritmetica, TipoAritmetica } = require('../Expresion/Aritmetica')
    const { Relacional, TipoRelacional } = require('../Expresion/Relacional')
    const { Literal, TipoLiteral } = require('../Expresion/Literal')
    const { Declaracion } = require('../Instruccion/Declaracion')
    const { Print } = require('../Instruccion/Print')
    const { Acceso } = require('../Expresion/Acceso')
    const { Error_ } = require('../Error/Error')
    const { Statement } = require('../Instruccion/Statement')
    const { If } = require('../Instruccion/If')
    const {While} = require('../Instruccion/While')
    const {Break} = require('../Instruccion/Break')
    const {Funcion} = require('../Instruccion/Funcion')
    const {LlamadaFuncion} = require('../Instruccion/LlamadaFuncion')
    const {Return} = require('../Instruccion/Return')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 57;
break;
case 4:return 58;
break;
case 5:return 25;
break;
case 6:return 29;
break;
case 7:return 30;
break;
case 8:return 33;
break;
case 9:return 34;
break;
case 10:return 'SWITCH';
break;
case 11:return 'BREAK';
break;
case 12:return 'RETURN';
break;
case 13:return 37;
break;
case 14:return 15;
break;
case 15:return 17;
break;
case 16:return 18;
break;
case 17:return 19;
break;
case 18:return 20;
break;
case 19:return 56;
break;
case 20:return 55;
break;
case 21: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 22: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 54; 
break;
case 23:return 24;
break;
case 24:return 26;
break;
case 25:return 28;
break;
case 26:return 35;
break;
case 27:return 36;
break;
case 28:return 45;
break;
case 29:return 48;
break;
case 30:return 50;
break;
case 31:return 47;                     
break;
case 32:return 49;
break;
case 33:return 46;
break;
case 34:return 21;
break;
case 35:return 60;
break;
case 36:return 52;
break;
case 37:return 51;
break;
case 38:return 53;
break;
case 39:return 23;
break;
case 40:return 'DOSPUNTOS';
break;
case 41:return 14;
break;
case 42:return 40;
break;
case 43:return 39;
break;
case 44:return 41;
break;
case 45:return 42;
break;
case 46:return 43;
break;
case 47:return 44;
break;
case 48:return 5;
break;
case 49:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:\d+\.\d+\b)/i,/^(?:\d+\b)/i,/^(?:'.')/i,/^(?:("[^\"]*"))/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
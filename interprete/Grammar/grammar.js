/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,19],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,31],$Vc=[1,28],$Vd=[1,30],$Ve=[1,29],$Vf=[5,19,20,23,25,26,27,28,32,34,38,39,43,47,49,52,53,54,57],$Vg=[1,42],$Vh=[1,62],$Vi=[1,76],$Vj=[1,80],$Vk=[1,89],$Vl=[1,90],$Vm=[1,91],$Vn=[1,92],$Vo=[1,93],$Vp=[1,94],$Vq=[1,95],$Vr=[1,67],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,102],$VA=[1,104],$VB=[8,29,31],$VC=[2,30],$VD=[8,37],$VE=[1,145],$VF=[1,132],$VG=[1,131],$VH=[1,133],$VI=[1,134],$VJ=[1,135],$VK=[1,136],$VL=[1,137],$VM=[1,138],$VN=[1,139],$VO=[1,140],$VP=[1,141],$VQ=[1,142],$VR=[1,143],$VS=[1,144],$VT=[8,31,37,50,65,69,86,87,88,89,90,91,92,93,94,95,96,97,98,99],$VU=[1,152],$VV=[1,153],$VW=[31,37],$VX=[1,179],$VY=[31,37,69],$VZ=[5,19,20,23,25,26,27,28,32,34,38,39,42,43,47,49,52,53,54,57],$V_=[1,187],$V$=[8,31,37,50,65,69,98,99],$V01=[1,218],$V11=[1,219],$V21=[1,220],$V31=[1,221],$V41=[1,222],$V51=[1,223],$V61=[8,31,37,50,65,69,86,87,92,93,94,95,96,97,98,99],$V71=[8,31,37,50,65,69,86,87,88,89,92,93,94,95,96,97,98,99],$V81=[8,31,37,50,65,69,92,93,98,99],$V91=[8,31,37,50,65,69,92,93,94,95,96,97,98,99],$Va1=[2,49],$Vb1=[1,288],$Vc1=[1,287],$Vd1=[1,313],$Ve1=[47,49,52],$Vf1=[2,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"inicio":6,"asignacion":7,"PUNTO_Y_COMA":8,"declaracion":9,"print":10,"if":11,"while":12,"do_while":13,"for":14,"switch":15,"funcion":16,"incremento":17,"decremento":18,"BREAK":19,"CONTINUE":20,"declaracion_vectores":21,"modificacion_vectores":22,"INT":23,"declaracion_multiple":24,"DOUBLE":25,"CHAR":26,"BOOLEAN":27,"STRING":28,"IGUAL":29,"expresion":30,"COMA":31,"IDENTIFICADOR":32,"casteos":33,"PRINT":34,"PAR_ABRE":35,"ListaExpr":36,"PAR_CIERRA":37,"PRINTLN":38,"IF":39,"statement":40,"elsE":41,"ELSE":42,"SWITCH":43,"LL_ABRE":44,"lista_case":45,"default":46,"LL_CIERRA":47,"case":48,"CASE":49,"DOSPUNTOS":50,"statement_case":51,"DEFAULT":52,"WHILE":53,"FOR":54,"incremento_sin_punto_y_coma":55,"decremento_sin_punto_y_coma":56,"DO":57,"tipo_dato":58,"parametros":59,"llamadaFuncion":60,"VOID":61,"MAS_MAS":62,"MENOS_MENOS":63,"ternario":64,"QUESTION":65,"vector_una_dimension":66,"vector_dos_dimensiones":67,"COR_ABRE":68,"COR_CIERRA":69,"NEW":70,"to_char_array":71,"acceso_vectores":72,"type_of":73,"TYPEOF":74,"to_string":75,"TOSTRING":76,"TOCHARARRAY":77,"length_":78,"LENGTH":79,"to_lower":80,"TOLOWER":81,"to_upper":82,"TOUPPER":83,"round":84,"ROUND":85,"MENOS":86,"MAS":87,"POR":88,"DIVIDIR":89,"POTENCIA":90,"MODULO":91,"IGUAL_IGUAL":92,"DIFERENTE":93,"MAYOR_IGUAL":94,"MENOR_IGUAL":95,"MAYOR":96,"MENOR":97,"AND":98,"OR":99,"NOT":100,"CADENA":101,"ENTERO":102,"DECIMAL":103,"TRUE":104,"FALSE":105,"CARACTER":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTO_Y_COMA",19:"BREAK",20:"CONTINUE",23:"INT",25:"DOUBLE",26:"CHAR",27:"BOOLEAN",28:"STRING",29:"IGUAL",31:"COMA",32:"IDENTIFICADOR",34:"PRINT",35:"PAR_ABRE",37:"PAR_CIERRA",38:"PRINTLN",39:"IF",42:"ELSE",43:"SWITCH",44:"LL_ABRE",47:"LL_CIERRA",49:"CASE",50:"DOSPUNTOS",52:"DEFAULT",53:"WHILE",54:"FOR",57:"DO",61:"VOID",62:"MAS_MAS",63:"MENOS_MENOS",65:"QUESTION",68:"COR_ABRE",69:"COR_CIERRA",70:"NEW",74:"TYPEOF",76:"TOSTRING",77:"TOCHARARRAY",79:"LENGTH",81:"TOLOWER",83:"TOUPPER",85:"ROUND",86:"MENOS",87:"MAS",88:"POR",89:"DIVIDIR",90:"POTENCIA",91:"MODULO",92:"IGUAL_IGUAL",93:"DIFERENTE",94:"MAYOR_IGUAL",95:"MENOR_IGUAL",96:"MAYOR",97:"MENOR",98:"AND",99:"OR",100:"NOT",101:"CADENA",102:"ENTERO",103:"DECIMAL",104:"TRUE",105:"FALSE",106:"CARACTER"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,4],[9,4],[9,4],[9,4],[9,4],[24,3],[24,1],[7,3],[7,3],[10,5],[10,5],[36,3],[36,1],[11,6],[41,2],[41,2],[41,0],[15,8],[15,7],[45,2],[45,1],[48,4],[51,1],[51,0],[46,3],[46,0],[12,5],[14,9],[14,9],[14,9],[14,9],[14,9],[14,9],[13,6],[40,3],[40,2],[16,6],[16,7],[59,3],[59,1],[60,3],[60,4],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[17,3],[18,3],[55,2],[56,2],[64,5],[33,4],[33,4],[33,4],[21,1],[21,1],[66,10],[66,8],[66,10],[66,8],[66,10],[66,8],[66,6],[66,10],[66,8],[66,10],[66,8],[67,15],[67,10],[67,15],[67,10],[67,15],[67,10],[67,15],[67,10],[67,15],[67,10],[72,4],[72,7],[22,6],[22,9],[73,4],[75,4],[71,4],[78,4],[80,4],[82,4],[84,4],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 43:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]
break;
case 15:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 16:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 19:
 this.$ = new Declaracion($$[$0], new Literal(0, TipoLiteral.ENTERO ,_$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column, 0, null, null, TipoLiteral.ENTERO) 
break;
case 20:
 this.$ = new Declaracion($$[$0], new Literal(0.0, TipoLiteral.DOBLE ,_$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column, 0, null, null, TipoLiteral.DOBLE) 
break;
case 21:
 this.$ = new Declaracion($$[$0], new Literal("\u0000", TipoLiteral.CARACTER ,_$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column, 0, null, null, TipoLiteral.CARACTER) 
break;
case 22:
 this.$ = new Declaracion($$[$0], new Literal(true, TipoLiteral.BOOLEAN ,_$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column, 0, null, null, TipoLiteral.BOOLEAN) 
break;
case 23:
 this.$ = new Declaracion($$[$0], new Literal("", TipoLiteral.CADENA ,_$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column, 0, null, null, TipoLiteral.CADENA) 
break;
case 24:
 this.$ = new Declaracion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, null, null, TipoLiteral.ENTERO) 
break;
case 25:
 this.$ = new Declaracion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, null, null, TipoLiteral.DOBLE) 
break;
case 26:
 this.$ = new Declaracion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, null, null, TipoLiteral.CARACTER) 
break;
case 27:
 this.$ = new Declaracion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, null, null, TipoLiteral.BOOLEAN) 
break;
case 28:
 this.$ = new Declaracion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, null, null, TipoLiteral.CADENA) 
break;
case 29: case 35:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 30:
 this.$ = [$$[$0].toLowerCase()] 
break;
case 31: case 32:
 this.$ = new Declaracion([$$[$0-2].toLowerCase()], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, 1, null, null, $$[$0].tipo) 
break;
case 33:
 this.$ = new Print($$[$0-2], 0, _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 34:
 this.$ = new Print($$[$0-2], 1, _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 36: case 44: case 63:
 this.$ = [$$[$0]] 
break;
case 37:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 38: case 39: case 48: case 138: case 139: case 140: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149:
 this.$ = $$[$0] 
break;
case 40: case 49:
 this.$ = null 
break;
case 41:
 this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column) 
break;
case 42:
 this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 45:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 46:
 this.$ = new Statement($$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 47:
 this.$ = new Statement([], _$[$0].first_line, _$[$0].first_column) 
break;
case 50:
 this.$ = new While($$[$0-2], $$[$0],  _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 51: case 52: case 53: case 54: case 55: case 56:
 this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column) 
break;
case 57:
 this.$ = new Do_While($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 58:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 59:
 this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 60:
 this.$ = new Funcion($$[$0-5], $$[$0], [], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 61:
 this.$ = new Funcion($$[$0-6], $$[$0], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 62:
 $$[$0-2].push($$[$0]); this.$ =$$[$0-2] 
break;
case 64:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 65:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 66:
 this.$ = TipoFuncion.INT 
break;
case 67:
 this.$ = TipoFuncion.DOUBLE 
break;
case 68:
 this.$ = TipoFuncion.CHAR 
break;
case 69:
 this.$ = TipoFuncion.BOOLEAN 
break;
case 70:
 this.$ = TipoFuncion.STRING 
break;
case 71:
 this.$ = TipoFuncion.VOID 
break;
case 72:
 this.$ = new Increment_Decrement($$[$0-2], new Acceso($$[$0-2].toLowerCase(), 0, null, null, _$[$0-2].first_line, _$[$0-2].first_column), true, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 73:
this.$ = new Increment_Decrement($$[$0-2], new Acceso($$[$0-2].toLowerCase(), 0, null, null, _$[$0-2].first_line, _$[$0-2].first_column), false, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 74:
 this.$ = new Increment_Decrement($$[$0-1], new Acceso($$[$0-1].toLowerCase(), 0, null, null, _$[$0-1].first_line, _$[$0-1].first_column), true, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 75:
this.$ = new Increment_Decrement($$[$0-1], new Acceso($$[$0-1].toLowerCase(), 0, null, null, _$[$0-1].first_line, _$[$0-1].first_column), false, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 76:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 77:
 this.$ = new Casteo(TipoCasteo.DOBLE, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 78:
 this.$ = new Casteo(TipoCasteo.CARACTER, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 79:
 this.$ = new Casteo(TipoCasteo.ENTERO, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 82:
 this.$ = new Vector(Type.ENTERO, $$[$0-8], [], $$[$0-1], TipoDato.VECTOR, _$[$0-9].first_line, _$[$0-9].first_column) 
break;
case 83:
 this.$ = new Vector(Type.ENTERO, $$[$0-6], $$[$0-1], new Literal($$[$0-1].length, TipoLiteral.ENTERO, _$[$0-7].first_line, _$[$0-7].first_column), TipoDato.VECTOR, _$[$0-7].first_line, _$[$0-7].first_column) 
break;
case 84:
 this.$ = new Vector(Type.DOBLE, $$[$0-8], [], $$[$0-1], TipoDato.VECTOR, _$[$0-9].first_line, _$[$0-9].first_column) 
break;
case 85:
 this.$ = new Vector(Type.DOBLE, $$[$0-6], $$[$0-1], new Literal($$[$0-1].length, TipoLiteral.ENTERO, _$[$0-7].first_line, _$[$0-7].first_column), TipoDato.VECTOR, _$[$0-7].first_line, _$[$0-7].first_column) 
break;
case 86:
 this.$ = new Vector(Type.CARACTER, $$[$0-8], [], $$[$0-1], TipoDato.VECTOR, _$[$0-9].first_line, _$[$0-9].first_column) 
break;
case 87:
 this.$ = new Vector(Type.CARACTER, $$[$0-6], $$[$0-1], new Literal($$[$0-1].length, TipoLiteral.ENTERO, _$[$0-7].first_line, _$[$0-7].first_column), TipoDato.VECTOR, _$[$0-7].first_line, _$[$0-7].first_column) 
break;
case 88:
 
            let objeto = new Vector(Type.CARACTER, $$[$0-4], [], 0, TipoDato.VECTOR, _$[$0-5].first_line, _$[$0-5].first_column);
            objeto.charArray = $$[$0];
            this.$ = objeto;
        
break;
case 89:
 this.$ = new Vector(Type.BOOLEAN, $$[$0-8], [], $$[$0-1], TipoDato.VECTOR, _$[$0-9].first_line, _$[$0-9].first_column) 
break;
case 90:
 this.$ = new Vector(Type.BOOLEAN, $$[$0-6], $$[$0-1], new Literal($$[$0-1].length, TipoLiteral.ENTERO, _$[$0-7].first_line, _$[$0-7].first_column), TipoDato.VECTOR, _$[$0-7].first_line, _$[$0-7].first_column) 
break;
case 91:
 this.$ = new Vector(Type.CADENA, $$[$0-8], [], $$[$0-1], TipoDato.VECTOR, _$[$0-9].first_line, _$[$0-9].first_column) 
break;
case 92:
 this.$ = new Vector(Type.CADENA, $$[$0-6], $$[$0-1], new Literal($$[$0-1].length, TipoLiteral.ENTERO, _$[$0-7].first_line, _$[$0-7].first_column), TipoDato.VECTOR, _$[$0-7].first_line, _$[$0-7].first_column) 
break;
case 93:
 this.$ = new Matriz(Type.ENTERO, $$[$0-13], [], $$[$0-4], $$[$0-1], TipoDato.VECTOR, _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 94:
 
            let mi = 0;
            let auxi = 0;
            for (const i of $$[$0-1]) {
                mi++;
                let ni = 0;
                for (const j of i) {
                    ni++;
                }
                if (auxi < ni) { auxi = ni; }
            }
            this.$ = new Matriz(Type.ENTERO, $$[$0-8], $$[$0-1], new Literal(mi, TipoLiteral.ENTERO, _$[$0-9].first_line, _$[$0-9].first_column), new Literal(auxi, TipoLiteral.ENTERO, _$[$0-9].first_line, _$[$0-9].first_column), TipoDato.VECTOR, _$[$0-9].first_line, _$[$0-9].first_column) 
        
break;
case 95:
 this.$ = new Matriz(Type.DOBLE, $$[$0-13], [], $$[$0-4], $$[$0-1], TipoDato.VECTOR, _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 96:
 
            let md = 0;
            let auxd = 0;
            for (const i of $$[$0-1]) {
                md++;
                let nd = 0;
                for (const j of i) { nd++; }
                if (auxd < nd) { auxd = nd; }
            }
            this.$ = new Matriz(Type.DOBLE, $$[$0-8], $$[$0-1], new Literal(md, TipoLiteral.ENTERO, _$[$0-9].first_line, _$[$0-9].first_column), new Literal(auxd, TipoLiteral.ENTERO, _$[$0-9].first_line, _$[$0-9].first_column), TipoDato.VECTOR, _$[$0-9].first_line, _$[$0-9].first_column) 
        
break;
case 97:
 this.$ = new Matriz(Type.CARACTER, $$[$0-13], [], $$[$0-4], $$[$0-1], TipoDato.VECTOR, _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 98:
 
            let mc = 0;
            let auxc = 0;
            for (const i of $$[$0-1]) {
                mc++;
                let nc = 0;
                for (const j of i) { nc++; }
                if (auxc < nc) { auxc = nc; }
            }
            this.$ = new Matriz(Type.CARACTER, $$[$0-8], $$[$0-1], new Literal(mc, TipoLiteral.ENTERO, _$[$0-9].first_line, _$[$0-9].first_column), new Literal(auxc, TipoLiteral.ENTERO, _$[$0-9].first_line, _$[$0-9].first_column), TipoDato.VECTOR, _$[$0-9].first_line, _$[$0-9].first_column)
        
break;
case 99:
 this.$ = new Matriz(Type.BOOLEAN, $$[$0-13], [], $$[$0-4], $$[$0-1], TipoDato.VECTOR, _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 100:
 
            let mb = 0;
            let auxb = 0;
            for (const i of $$[$0-1]) {
                mb++;
                let nb = 0;
                for (const j of i) { nb++; }
                if (auxb < nb) { auxb = nb; }
            }
            this.$ = new Matriz(Type.BOOLEAN, $$[$0-8], $$[$0-1], new Literal(mb, TipoLiteral.ENTERO, _$[$0-9].first_line, _$[$0-9].first_column), new Literal(auxb, TipoLiteral.ENTERO, _$[$0-9].first_line, _$[$0-9].first_column), TipoDato.VECTOR, _$[$0-9].first_line, _$[$0-9].first_column) 
        
break;
case 101:
 this.$ = new Matriz(Type.CADENA, $$[$0-13], [], $$[$0-4], $$[$0-1], TipoDato.VECTOR, _$[$0-14].first_line, _$[$0-14].first_column) 
break;
case 102:
 
            let ms = 0; 
            let auxs = 0;
            for (const i of $$[$0-1]) {
                ms++;
                let ns = 0;
                for (const j of i) { ns++; }
                if (auxs < ns) { auxs = ns; }
            }
            this.$ = new Matriz(Type.CADENA, $$[$0-8], $$[$0-1], new Literal(ms, TipoLiteral.ENTERO, _$[$0-9].first_line, _$[$0-9].first_column), new Literal(auxs, TipoLiteral.ENTERO, _$[$0-9].first_line, _$[$0-9].first_column), TipoDato.VECTOR, _$[$0-9].first_line, _$[$0-9].first_column) 
        
break;
case 103:
 this.$ = new Acceso($$[$0-3].toLowerCase(), 1, $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 104:
 this.$ = new Acceso($$[$0-6].toLowerCase(), 2, $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 105:
 this.$ = new Declaracion([$$[$0-5]], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column, 2, $$[$0-3], null, $$[$0].tipo) 
break;
case 106:
 this.$ = new Declaracion([$$[$0-8]], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column, 3, $$[$0-6], $$[$0-3], $$[$0].tipo) 
break;
case 107:
 this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 108:
 this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 109:
 this.$ = new ToCharArray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 110:
 this.$ = new Length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 111:
 this.$ = new ToLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 112:
 this.$ = new ToUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 113:
 this.$ = new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 114:
 this.$ = new Aritmetica($$[$0], new Literal("-1", TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column), TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 115:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 116:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 117:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 118:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 119:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 120:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 121:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 122:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 123:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 124:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 125:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 126:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 127: case 141:
 this.$ = $$[$0-1] 
break;
case 128:
 this.$ = new Logica($$[$0-2], $$[$0], TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 129:
 this.$ = new Logica($$[$0-2], $$[$0], TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 130:
 this.$ = new Logica($$[$0], null, TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 131:
 this.$ = new Literal($$[$0], TipoLiteral.CADENA, _$[$0].first_line, _$[$0].first_column) 
break;
case 132:
 this.$ = new Literal($$[$0], TipoLiteral.ENTERO, _$[$0].first_line, _$[$0].first_column) 
break;
case 133:
 this.$ = new Literal($$[$0], TipoLiteral.DOBLE, _$[$0].first_line, _$[$0].first_column) 
break;
case 134: case 135:
 this.$ = new Literal($$[$0], TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column) 
break;
case 136:
 this.$ = new Literal($$[$0], TipoLiteral.CARACTER, _$[$0].first_line, _$[$0].first_column) 
break;
case 137:
 this.$ = new Acceso($$[$0].toLowerCase(), 0, null, null, _$[$0].first_line, _$[$0].first_column) 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:17,22:18,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,38:$V9,39:$Va,43:$Vb,53:$Vc,54:$Vd,57:$Ve,66:32,67:33},{1:[3]},{5:[1,34],6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:17,22:18,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,38:$V9,39:$Va,43:$Vb,53:$Vc,54:$Vd,57:$Ve,66:32,67:33},o($Vf,[2,3]),{8:[1,36]},{8:[1,37]},o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),{8:[1,38]},{8:[1,39]},{8:[1,40]},{8:[1,41]},{29:$Vg,35:[1,43],62:[1,44],63:[1,45],68:[1,46]},{24:47,32:[1,48]},{24:49,32:[1,50]},{24:51,32:[1,52]},{24:53,32:[1,54]},{24:55,32:[1,56]},{35:[1,57]},{35:[1,58]},{35:[1,59]},{35:[1,60]},{40:61,44:$Vh},{35:[1,63]},{35:[1,64]},{8:[2,80]},{8:[2,81]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),{30:65,32:$Vi,33:66,35:[1,68],55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{32:[1,98],37:[1,96],59:97},{8:[1,99]},{8:[1,100]},{30:101,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,19],29:[1,103],31:$VA},o($VB,$VC,{68:[1,105]}),{8:[2,20],29:[1,106],31:$VA},o($VB,$VC,{68:[1,107]}),{8:[2,21],29:[1,108],31:$VA},o($VB,$VC,{68:[1,109]}),{8:[2,22],29:[1,110],31:$VA},o($VB,$VC,{68:[1,111]}),{8:[2,23],29:[1,112],31:$VA},o($VB,$VC,{68:[1,113]}),{30:115,32:$Vi,35:$Vz,36:114,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:115,32:$Vi,35:$Vz,36:116,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:117,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:118,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{53:[1,119]},{4:120,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:17,22:18,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,38:$V9,39:$Va,43:$Vb,47:[1,121],53:$Vc,54:$Vd,57:$Ve,66:32,67:33},{7:123,9:122,23:[1,124],25:[1,125],26:[1,126],27:[1,127],28:[1,128],32:[1,129]},{30:130,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},o($VD,[2,31],{65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS}),o($VD,[2,32]),{30:146,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{23:[1,150],25:[1,148],26:[1,149],30:147,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:151,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},o($VT,[2,131]),o($VT,[2,132]),o($VT,[2,133]),o($VT,[2,134]),o($VT,[2,135]),o($VT,[2,136]),o($VT,[2,137],{62:$VU,63:$VV,68:[1,154]}),o($VT,[2,138]),o($VT,[2,139]),o($VT,[2,140]),{30:115,32:$Vi,35:$Vz,36:155,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},o($VT,[2,142]),o($VT,[2,143]),o($VT,[2,144]),o($VT,[2,145]),o($VT,[2,146]),o($VT,[2,147]),o($VT,[2,148]),o($VT,[2,149]),{35:[1,156]},{35:[1,157]},{35:[1,158]},{35:[1,159]},{35:[1,160]},{35:[1,161]},{35:[1,162]},{50:[1,163]},{31:[1,165],37:[1,164]},o($VW,[2,63]),o($Vf,[2,72]),o($Vf,[2,73]),{65:$VE,69:[1,166],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{30:147,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:167,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{32:[1,168]},{69:[1,169]},{30:170,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{69:[1,171]},{30:172,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{69:[1,173]},{30:174,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{69:[1,175]},{30:176,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{69:[1,177]},{31:$VX,37:[1,178]},o($VY,[2,36],{65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS}),{31:$VX,37:[1,180]},{37:[1,181],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{37:[1,182],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{35:[1,183]},{6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:17,22:18,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,38:$V9,39:$Va,43:$Vb,47:[1,184],53:$Vc,54:$Vd,57:$Ve,66:32,67:33},o($VZ,[2,59]),{8:[1,185]},{8:[1,186]},{24:47,32:$V_},{24:49,32:$V_},{24:51,32:$V_},{24:53,32:$V_},{24:55,32:$V_},{29:$Vg},{37:[1,188],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{30:189,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:190,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:191,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:192,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:193,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:194,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:195,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:196,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:197,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:198,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:199,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:200,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:201,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:202,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:203,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},o($VT,[2,114]),{37:[1,204],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{37:[1,205]},{37:[1,206]},{37:[1,207]},o($V$,[2,130],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ}),o($VT,[2,74]),o($VT,[2,75]),{30:208,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{31:$VX,69:[1,209]},{30:210,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:211,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:212,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:213,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:214,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:215,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:216,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{23:$V01,25:$V11,26:$V21,27:$V31,28:$V41,58:217,61:$V51},{50:[1,224]},{32:[1,225]},{29:[1,226],68:[1,227]},{8:[2,24],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},o($VB,[2,29]),{29:[1,228],68:[1,229]},{8:[2,25],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{29:[1,230],68:[1,231]},{8:[2,26],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{29:[1,232],68:[1,233]},{8:[2,27],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{29:[1,234],68:[1,235]},{8:[2,28],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{29:[1,236],68:[1,237]},{8:[1,238]},{30:239,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[1,240]},{40:241,44:$Vh},{40:242,44:$Vh},{30:243,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},o($VZ,[2,58]),{30:244,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:245,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},o($VB,$VC),{44:[1,246]},o($V61,[2,115],{88:$VH,89:$VI,90:$VJ,91:$VK}),o($V61,[2,116],{88:$VH,89:$VI,90:$VJ,91:$VK}),o($V71,[2,117],{90:$VJ,91:$VK}),o($V71,[2,118],{90:$VJ,91:$VK}),o($VT,[2,119]),o($VT,[2,120]),o($V81,[2,121],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,94:$VN,95:$VO,96:$VP,97:$VQ}),o($V81,[2,122],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,94:$VN,95:$VO,96:$VP,97:$VQ}),o($V91,[2,123],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK}),o($V91,[2,124],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK}),o($V91,[2,125],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK}),o($V91,[2,126],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK}),o($V$,[2,128],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ}),o([8,31,37,50,65,69,99],[2,129],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR}),{50:[1,247],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},o($VT,[2,127]),{30:248,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:249,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:250,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{65:$VE,69:[1,251],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},o($VT,[2,141]),{37:[1,252],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{37:[1,253],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{37:[1,254],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{37:[1,255],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{37:[1,256],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{37:[1,257],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{37:[1,258],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{40:259,44:$Vh},{44:[2,66]},{44:[2,67]},{44:[2,68]},{44:[2,69]},{44:[2,70]},{44:[2,71]},{23:$V01,25:$V11,26:$V21,27:$V31,28:$V41,58:260,61:$V51},o($VW,[2,62]),{30:261,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:262,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{68:[1,264],70:[1,263]},{69:[1,265]},{68:[1,267],70:[1,266]},{69:[1,268]},{68:[1,270],70:[1,269],71:271,77:$Vm},{69:[1,272]},{68:[1,274],70:[1,273]},{69:[1,275]},{68:[1,277],70:[1,276]},{69:[1,278]},o($Vf,[2,33]),o($VY,[2,35],{65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS}),o($Vf,[2,34]),o($Vf,[2,40],{41:279,42:[1,280]}),o($Vf,[2,50]),{37:[1,281],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{8:[1,282],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{8:[1,283],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{45:284,46:285,47:$Va1,48:286,49:$Vb1,52:$Vc1},{30:289,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},o($VD,[2,77],{65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS}),o($VD,[2,78],{65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS}),o($VD,[2,79],{65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS}),o($VT,[2,103],{68:[1,290]}),o($VT,[2,107]),o($VT,[2,108]),o($VT,[2,109]),o($VT,[2,110]),o($VT,[2,111]),o($VT,[2,112]),o($VT,[2,113]),o($Vf,[2,60]),{40:291,44:$Vh},{8:[2,105],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,292],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{23:[1,293]},{30:115,32:$Vi,35:$Vz,36:294,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{29:[1,295]},{25:[1,296]},{30:115,32:$Vi,35:$Vz,36:297,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{29:[1,298]},{26:[1,299]},{30:115,32:$Vi,35:$Vz,36:300,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,88]},{29:[1,301]},{27:[1,302]},{30:115,32:$Vi,35:$Vz,36:303,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{29:[1,304]},{28:[1,305]},{30:115,32:$Vi,35:$Vz,36:306,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{29:[1,307]},o($Vf,[2,37]),{11:309,39:$Va,40:308,44:$Vh},o($Vf,[2,57]),{7:312,32:$Vd1,55:310,56:311},{7:316,32:$Vd1,55:314,56:315},{46:317,47:$Va1,48:318,49:$Vb1,52:$Vc1},{47:[1,319]},o($Ve1,[2,44]),{50:[1,320]},{30:321,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},o([8,31,37,50,65,69],[2,76],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS}),{30:322,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},o($Vf,[2,61]),{29:[1,323]},{68:[1,324]},{31:$VX,69:[1,325]},{68:[1,327],70:[1,326]},{68:[1,328]},{31:$VX,69:[1,329]},{68:[1,331],70:[1,330]},{68:[1,332]},{31:$VX,69:[1,333]},{68:[1,335],70:[1,334]},{68:[1,336]},{31:$VX,69:[1,337]},{68:[1,339],70:[1,338]},{68:[1,340]},{31:$VX,69:[1,341]},{68:[1,343],70:[1,342]},o($Vf,[2,38]),o($Vf,[2,39]),{37:[1,344]},{37:[1,345]},{37:[1,346]},{29:$Vg,62:$VU,63:$VV},{37:[1,347]},{37:[1,348]},{37:[1,349]},{47:[1,350]},o($Ve1,[2,43]),o($Vf,[2,42]),{4:352,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:17,22:18,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,38:$V9,39:$Va,43:$Vb,47:$Vf1,51:351,53:$Vc,54:$Vd,57:$Ve,66:32,67:33},{50:[1,353],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,354],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{30:355,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:356,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,83]},{23:[1,357]},{30:115,32:$Vi,35:$Vz,36:358,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:359,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,85]},{25:[1,360]},{30:115,32:$Vi,35:$Vz,36:361,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:362,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,87]},{26:[1,363]},{30:115,32:$Vi,35:$Vz,36:364,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:365,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,90]},{27:[1,366]},{30:115,32:$Vi,35:$Vz,36:367,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:368,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,92]},{28:[1,369]},{30:115,32:$Vi,35:$Vz,36:370,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{40:371,44:$Vh},{40:372,44:$Vh},{40:373,44:$Vh},{40:374,44:$Vh},{40:375,44:$Vh},{40:376,44:$Vh},o($Vf,[2,41]),{47:[2,48]},o($Ve1,[2,46],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,21:17,22:18,66:32,67:33,6:35,19:$V0,20:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,38:$V9,39:$Va,43:$Vb,53:$Vc,54:$Vd,57:$Ve}),o($Ve1,$Vf1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,21:17,22:18,66:32,67:33,4:352,51:377,19:$V0,20:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,38:$V9,39:$Va,43:$Vb,53:$Vc,54:$Vd,57:$Ve}),o($VT,[2,104]),{8:[2,106],65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,378],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{68:[1,379]},{31:$VX,69:[1,380]},{65:$VE,69:[1,381],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{68:[1,382]},{31:$VX,69:[1,383]},{65:$VE,69:[1,384],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{68:[1,385]},{31:$VX,69:[1,386]},{65:$VE,69:[1,387],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{68:[1,388]},{31:$VX,69:[1,389]},{65:$VE,69:[1,390],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{68:[1,391]},{31:$VX,69:[1,392]},o($Vf,[2,51]),o($Vf,[2,52]),o($Vf,[2,53]),o($Vf,[2,54]),o($Vf,[2,55]),o($Vf,[2,56]),o($Ve1,[2,45]),{8:[2,82]},{30:393,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,94]},{8:[2,84]},{30:394,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,96]},{8:[2,86]},{30:395,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,98]},{8:[2,89]},{30:396,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,100]},{8:[2,91]},{30:397,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{8:[2,102]},{65:$VE,69:[1,398],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,399],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,400],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,401],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,402],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{68:[1,403]},{68:[1,404]},{68:[1,405]},{68:[1,406]},{68:[1,407]},{30:408,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:409,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:410,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:411,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{30:412,32:$Vi,35:$Vz,55:78,56:79,64:77,68:$Vj,71:84,72:81,73:82,74:$Vk,75:83,76:$Vl,77:$Vm,78:85,79:$Vn,80:86,81:$Vo,82:87,83:$Vp,84:88,85:$Vq,86:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy},{65:$VE,69:[1,413],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,414],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,415],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,416],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{65:$VE,69:[1,417],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS},{8:[2,93]},{8:[2,95]},{8:[2,97]},{8:[2,99]},{8:[2,101]}],
defaultActions: {32:[2,80],33:[2,81],34:[2,1],218:[2,66],219:[2,67],220:[2,68],221:[2,69],222:[2,70],223:[2,71],271:[2,88],325:[2,83],329:[2,85],333:[2,87],337:[2,90],341:[2,92],351:[2,48],378:[2,82],380:[2,94],381:[2,84],383:[2,96],384:[2,86],386:[2,98],387:[2,89],389:[2,100],390:[2,91],392:[2,102],413:[2,93],414:[2,95],415:[2,97],416:[2,99],417:[2,101]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //Import expresiones
    const { Aritmetica, TipoAritmetica } = require('../Expresion/Aritmetica')
    const { Relacional, TipoRelacional } = require('../Expresion/Relacional')
    const { Logica, TipoLogica } = require('../Expresion/Logica')
    const { Type, TipoDato } = require('../Expresion/Retorno')
    const { Literal, TipoLiteral } = require('../Expresion/Literal')
    const { Acceso } = require('../Expresion/Acceso')

    //Import instrucciones
    const { Declaracion } = require('../Instruccion/Declaracion')
    const { Print } = require('../Instruccion/Print')
    const { Statement } = require('../Instruccion/Statement')
    const { If } = require('../Instruccion/If')
    const { While } = require('../Instruccion/While')
    const { Do_While } = require('../Instruccion/Do_While')
    const { Switch } = require('../Instruccion/Switch')
    const { Case } = require('../Instruccion/Case')
    const { Break } = require('../Instruccion/Break')
    const { Continue } = require('../Instruccion/Continue')
    const { Funcion } = require('../Instruccion/Funcion')
    //const { LlamadaFuncion } = require('../Instruccion/LlamadaFuncion')
    const { Return } = require('../Instruccion/Return')
    const { Ternario } = require('../Instruccion/Ternario')
    const { Increment_Decrement } = require('../Instruccion/Increment_Decrement')
    const { Casteo, TipoCasteo } = require('../Instruccion/Casteo')
    const { For } = require('../Instruccion/For')
    const { Vector } = require('../Instruccion/Vector')
    const { Matriz } = require('../Instruccion/Matriz')
    const { TipoFuncion } = require('../Instruccion/Instruccion')

    //Import Funciones nativas
    const { TypeOf } = require('../Funciones_Nativas/TypeOf')
    const { ToString } = require('../Funciones_Nativas/ToString')
    const { ToCharArray } = require('../Funciones_Nativas/ToCharArray')

    const { Length } = require('../Funciones_Nativas/Length')
    const { Round } = require('../Funciones_Nativas/Round')
    const { ToLower } = require('../Funciones_Nativas/ToLower')
    const { ToUpper } = require('../Funciones_Nativas/ToUpper')

    //Import error
    const { Error_ } = require('../Error/Error')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 104;
break;
case 4:return 105;
break;
case 5:return 34;
break;
case 6:return 38;
break;
case 7:return 74;
break;
case 8:return 76;
break;
case 9:return 77;
break;
case 10:return 79;
break;
case 11:return 81;
break;
case 12:return 83;
break;
case 13:return 85;
break;
case 14:return 39;
break;
case 15:return 42;
break;
case 16:return 57;
break;
case 17:return 53;
break;
case 18:return 43;
break;
case 19:return 49;
break;
case 20:return 52;
break;
case 21:return 54;
break;
case 22:return 19;
break;
case 23:return 20;
break;
case 24:return 'RETURN';
break;
case 25:return 'FUNCTION'; //No aplica
break;
case 26:return 70;
break;
case 27:return 61;
break;
case 28:return 'RUN';
break;
case 29:return 23;
break;
case 30:return 25;
break;
case 31:return 26;
break;
case 32:return 27;
break;
case 33:return 28;
break;
case 34:return 103;
break;
case 35:return 102;
break;
case 36: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 106; 
break;
case 37: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 101; 
break;
case 38:return 32;
break;
case 39:return 35;
break;
case 40:return 37;
break;
case 41:return 44;
break;
case 42:return 47;
break;
case 43:return 68;
break;
case 44:return 69;
break;
case 45:return 92;
break;
case 46:return 95;
break;
case 47:return 97;
break;
case 48:return 94;                     
break;
case 49:return 96;
break;
case 50:return 93;
break;
case 51:return 29;
break;
case 52:return 65;
break;
case 53:return 99;
break;
case 54:return 98;
break;
case 55:return 100;
break;
case 56:return 31;
break;
case 57:return 50;
break;
case 58:return 8;
break;
case 59:return 62;
break;
case 60:return 87;
break;
case 61:return 63;
break;
case 62:return 86;
break;
case 63:return 88;
break;
case 64:return 89;
break;
case 65:return 90;
break;
case 66:return 91;
break;
case 67:return 5;
break;
case 68:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:length\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:run\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:\d+\.\d+\b)/i,/^(?:\d+\b)/i,/^(?:'.')/i,/^(?:("[^\"]*"))/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
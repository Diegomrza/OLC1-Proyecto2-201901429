/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,16],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[5,18,19,20,22,23,24,25,30,31,35,36,40,41,45,46],$Vf=[1,35],$Vg=[1,36],$Vh=[1,38],$Vi=[1,60],$Vj=[1,52],$Vk=[1,51],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,67],$Vt=[1,72],$Vu=[15,26,29],$Vv=[1,96],$Vw=[1,95],$Vx=[1,97],$Vy=[1,98],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[1,107],$VI=[1,108],$VJ=[1,109],$VK=[15,29,34,50,51,52,53,54,55,56,57,58,59,60,61,62,63,72,73],$VL=[1,118],$VM=[29,34],$VN=[5,15,18,19,20,22,23,24,25,29,30,31,34,35,36,40,41,45,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,72,73],$VO=[1,141],$VP=[15,29,34,62,63,72,73],$VQ=[1,178],$VR=[15,29,34,50,51,56,57,58,59,60,61,62,63,72,73],$VS=[15,29,34,50,51,52,53,56,57,58,59,60,61,62,63,72,73],$VT=[15,29,34,56,57,62,63,72,73],$VU=[15,29,34,56,57,58,59,60,61,62,63,72,73],$VV=[5,18,19,20,22,23,24,25,30,31,35,36,39,40,41,45,46],$VW=[1,215];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"inicio":6,"asignacion":7,"declaracion":8,"print":9,"if":10,"while":11,"for":12,"funcion":13,"llamadaFuncion":14,"PUNTO_Y_COMA":15,"incremento":16,"decremento":17,"BREAK":18,"CONTINUE":19,"INT":20,"declaracion_multiple":21,"DOUBLE":22,"CHAR":23,"BOOLEAN":24,"STRING":25,"IGUAL":26,"expresion":27,"casteos":28,"COMA":29,"IDENTIFICADOR":30,"PRINT":31,"PAR_ABRE":32,"ListaExpr":33,"PAR_CIERRA":34,"PRINTLN":35,"IF":36,"statement":37,"elsE":38,"ELSE":39,"WHILE":40,"FOR":41,"declaracion_for":42,"asignacion_for":43,"LL_ABRE":44,"LL_CIERRA":45,"FUNCTION":46,"parametros":47,"MAS_MAS":48,"MENOS_MENOS":49,"MENOS":50,"MAS":51,"POR":52,"DIVIDIR":53,"POTENCIA":54,"MODULO":55,"IGUAL_IGUAL":56,"DIFERENTE":57,"MAYOR_IGUAL":58,"MENOR_IGUAL":59,"MAYOR":60,"MENOR":61,"AND":62,"OR":63,"NOT":64,"CADENA":65,"ENTERO":66,"DECIMAL":67,"TRUE":68,"FALSE":69,"CARACTER":70,"ternario":71,"QUESTION":72,"DOSPUNTOS":73,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"PUNTO_Y_COMA",18:"BREAK",19:"CONTINUE",20:"INT",22:"DOUBLE",23:"CHAR",24:"BOOLEAN",25:"STRING",26:"IGUAL",29:"COMA",30:"IDENTIFICADOR",31:"PRINT",32:"PAR_ABRE",34:"PAR_CIERRA",35:"PRINTLN",36:"IF",39:"ELSE",40:"WHILE",41:"FOR",44:"LL_ABRE",45:"LL_CIERRA",46:"FUNCTION",48:"MAS_MAS",49:"MENOS_MENOS",50:"MENOS",51:"MAS",52:"POR",53:"DIVIDIR",54:"POTENCIA",55:"MODULO",56:"IGUAL_IGUAL",57:"DIFERENTE",58:"MAYOR_IGUAL",59:"MENOR_IGUAL",60:"MAYOR",61:"MENOR",62:"AND",63:"OR",64:"NOT",65:"CADENA",66:"ENTERO",67:"DECIMAL",68:"TRUE",69:"FALSE",70:"CARACTER",72:"QUESTION",73:"DOSPUNTOS"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[21,3],[21,1],[7,4],[7,4],[9,5],[9,5],[33,3],[33,1],[10,6],[38,2],[38,2],[38,0],[11,5],[12,9],[12,9],[12,9],[12,9],[12,9],[12,9],[42,4],[42,4],[42,4],[42,4],[42,4],[43,3],[37,3],[37,2],[13,5],[13,6],[47,3],[47,1],[14,3],[14,4],[16,3],[17,3],[28,4],[28,4],[28,4],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[71,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]
break;
case 14:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 15:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 16:
 this.$ = new Declaracion($$[$0-1], new Literal(0, TipoLiteral.ENTERO ,_$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column, 0, Type.ENTERO) 
break;
case 17:
 this.$ = new Declaracion($$[$0-1], new Literal(0.0, TipoLiteral.DOBLE ,_$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column, 0, Type.DOBLE) 
break;
case 18:
 this.$ = new Declaracion($$[$0-1], new Literal("\u0000", TipoLiteral.CARACTER ,_$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column, 0, Type.CARACTER) 
break;
case 19:
 this.$ = new Declaracion($$[$0-1], new Literal(true, TipoLiteral.BOOLEAN ,_$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column, 0, Type.BOOLEAN) 
break;
case 20:
 this.$ = new Declaracion($$[$0-1], new Literal("", TipoLiteral.CADENA ,_$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column, 0, Type.CADENA) 
break;
case 21: case 26:
 this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, 0, Type.ENTERO) 
break;
case 22: case 27:
 this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, 0, Type.DOBLE) 
break;
case 23: case 28:
 this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, 0, Type.CARACTER) 
break;
case 24: case 29:
 this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, 0, Type.BOOLEAN) 
break;
case 25: case 30:
 this.$ = new Declaracion($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column, 0, Type.CADENA) 
break;
case 31:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 32:
this.$ = [$$[$0].toLowerCase()]
break;
case 33: case 34:
 this.$ = new Declaracion($$[$0-3].toLowerCase(), $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, 1, $$[$0-1].tipo) 
break;
case 35:
 this.$ = new Print($$[$0-2], 0, _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 36:
 this.$ = new Print($$[$0-2], 1, _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 37:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 38: case 61:
 this.$ = [$$[$0]] 
break;
case 39:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 40: case 41:
 this.$ = $$[$0] 
break;
case 42:
 this.$ = null 
break;
case 43:
 this.$ = new While($$[$0-2], $$[$0],  _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 50: case 51: case 52: case 53: case 54:
 this.$ = new Declaracion($$[$0-2].toLowerCase(), $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, $$[$0].tipo) 
break;
case 55:
 this.$ = new Declaracion($$[$0-2].toLowerCase(), $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, 1, $$[$0].tipo) 
break;
case 56:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 57:
 this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 58:
 this.$ = new Funcion($$[$0-3], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 59:
 this.$ = new Funcion($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 60:
 $$[$0-2].push($$[$0]); this.$ =$$[$0-2] 
break;
case 62:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 64:
 this.$ = new Increment_Decrement($$[$0-2], new Acceso($$[$0-2].toLowerCase(), _$[$0-2].first_line, _$[$0-2].first_column), true, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 65:
this.$ = new Increment_Decrement($$[$0-2], new Acceso($$[$0-2].toLowerCase(), _$[$0-2].first_line, _$[$0-2].first_column), false, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 66:
 this.$ = new Casteo(TipoCasteo.DOBLE, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 67:
 this.$ = new Casteo(TipoCasteo.CARACTER, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 68:
 this.$ = new Casteo(TipoCasteo.ENTERO, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 69:
 this.$ = new Aritmetica($$[$0], new Literal("-1", TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column), TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 70:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 71:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 72:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 73:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 74:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 75:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 76:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 77:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 78:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 79:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 80:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 81:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 82:
 this.$ = $$[$0-1] 
break;
case 83:
 this.$ = new Logica($$[$0-2], $$[$0], TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 84:
 this.$ = new Logica($$[$0-2], $$[$0], TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 85:
 this.$ = new Logica($$[$0], null, TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 86:
 this.$ = new Literal($$[$0], TipoLiteral.CADENA, _$[$0].first_line, _$[$0].first_column) 
break;
case 87:
 this.$ = new Literal($$[$0], TipoLiteral.ENTERO, _$[$0].first_line, _$[$0].first_column) 
break;
case 88:
 this.$ = new Literal($$[$0], TipoLiteral.DOBLE, _$[$0].first_line, _$[$0].first_column) 
break;
case 89: case 90:
 this.$ = new Literal($$[$0], TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column) 
break;
case 91:
 this.$ = new Literal($$[$0], TipoLiteral.CARACTER, _$[$0].first_line, _$[$0].first_column) 
break;
case 92:
 this.$ = new Acceso($$[$0].toLowerCase(), _$[$0].first_line, _$[$0].first_column) 
break;
case 96:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:$V3,23:$V4,24:$V5,25:$V6,30:$V7,31:$V8,35:$V9,36:$Va,40:$Vb,41:$Vc,46:$Vd},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:$V3,23:$V4,24:$V5,25:$V6,30:$V7,31:$V8,35:$V9,36:$Va,40:$Vb,41:$Vc,46:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),{15:[1,30]},o($Ve,[2,12]),o($Ve,[2,13]),{15:[1,31]},{15:[1,32]},{26:[1,33],32:[1,34],48:$Vf,49:$Vg},{21:37,30:$Vh},{21:39,30:$Vh},{21:40,30:$Vh},{21:41,30:$Vh},{21:42,30:$Vh},{32:[1,43]},{32:[1,44]},{32:[1,45]},{32:[1,46]},{32:[1,47]},{30:[1,48]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,11]),o($Ve,[2,14]),o($Ve,[2,15]),{16:62,17:63,27:49,28:50,30:$Vi,32:$Vj,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:66,30:$Vi,32:$Vs,33:65,34:[1,64],50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{15:[1,68]},{15:[1,69]},{15:[1,70],26:[1,71],29:$Vt},o($Vu,[2,32]),{15:[1,73],26:[1,74],29:$Vt},{15:[1,75],26:[1,76],29:$Vt},{15:[1,77],26:[1,78],29:$Vt},{15:[1,79],26:[1,80],29:$Vt},{16:62,17:63,27:66,30:$Vi,32:$Vs,33:81,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:66,30:$Vi,32:$Vs,33:82,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:83,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:84,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{20:[1,87],22:[1,88],23:[1,89],24:[1,90],25:[1,91],30:[1,92],42:85,43:86},{32:[1,93]},{15:[1,94],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[1,110]},{16:62,17:63,27:111,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,20:[1,115],22:[1,113],23:[1,114],27:112,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:116,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},o($VK,[2,86]),o($VK,[2,87]),o($VK,[2,88]),o($VK,[2,89]),o($VK,[2,90]),o($VK,[2,91]),o($VK,[2,92],{48:$Vf,49:$Vg}),o($VK,[2,93]),o($VK,[2,94]),o($VK,[2,95]),{15:[2,62]},{29:$VL,34:[1,117]},o($VM,[2,38],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ}),{16:62,17:63,27:112,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},o($VN,[2,64]),o($VN,[2,65]),o($Ve,[2,16]),{16:62,17:63,27:119,28:120,30:$Vi,32:$Vj,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{30:[1,121]},o($Ve,[2,17]),{16:62,17:63,27:122,28:123,30:$Vi,32:$Vj,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},o($Ve,[2,18]),{16:62,17:63,27:124,28:125,30:$Vi,32:$Vj,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},o($Ve,[2,19]),{16:62,17:63,27:126,28:127,30:$Vi,32:$Vj,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},o($Ve,[2,20]),{16:62,17:63,27:128,28:129,30:$Vi,32:$Vj,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{29:$VL,34:[1,130]},{29:$VL,34:[1,131]},{34:[1,132],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{34:[1,133],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[1,134]},{15:[1,135]},{30:[1,136]},{30:[1,137]},{30:[1,138]},{30:[1,139]},{30:[1,140]},{26:$VO},{30:[1,144],34:[1,142],47:143},o($Ve,[2,33]),{16:62,17:63,27:145,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:146,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:147,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:148,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:149,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:150,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:151,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:152,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:153,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:154,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:155,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:156,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:157,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:158,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:159,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},o($Ve,[2,34]),o($VK,[2,69]),{34:[1,160],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{34:[1,161]},{34:[1,162]},{34:[1,163]},o($VP,[2,85],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),{15:[2,63]},{16:62,17:63,27:164,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{15:[1,165],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[1,166]},o($Vu,[2,31]),{15:[1,167],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[1,168]},{15:[1,169],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[1,170]},{15:[1,171],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[1,172]},{15:[1,173],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[1,174]},{15:[1,175]},{15:[1,176]},{37:177,44:$VQ},{37:179,44:$VQ},{16:62,17:63,27:180,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:181,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{26:[1,182]},{26:[1,183]},{26:[1,184]},{26:[1,185]},{26:[1,186]},{16:62,17:63,27:187,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{37:188,44:$VQ},{29:[1,190],34:[1,189]},o($VM,[2,61]),o($VR,[2,70],{52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VR,[2,71],{52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VS,[2,72],{54:$Vz,55:$VA}),o($VS,[2,73],{54:$Vz,55:$VA}),o($VK,[2,74]),o($VK,[2,75]),o($VT,[2,76],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,58:$VD,59:$VE,60:$VF,61:$VG}),o($VT,[2,77],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,58:$VD,59:$VE,60:$VF,61:$VG}),o($VU,[2,78],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VU,[2,79],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VU,[2,80],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VU,[2,81],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VP,[2,83],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),o([15,29,34,63,72,73],[2,84],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ,73:[1,191]},o($VK,[2,82]),{16:62,17:63,27:192,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:193,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:194,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},o($VM,[2,37],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ}),o($Ve,[2,21]),o($Ve,[2,26]),o($Ve,[2,22]),o($Ve,[2,27]),o($Ve,[2,23]),o($Ve,[2,28]),o($Ve,[2,24]),o($Ve,[2,29]),o($Ve,[2,25]),o($Ve,[2,30]),o($Ve,[2,35]),o($Ve,[2,36]),o($Ve,[2,42],{38:195,39:[1,196]}),{4:197,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:$V3,23:$V4,24:$V5,25:$V6,30:$V7,31:$V8,35:$V9,36:$Va,40:$Vb,41:$Vc,45:[1,198],46:$Vd},o($Ve,[2,43]),{15:[1,199],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[1,200],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{16:62,17:63,27:201,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:202,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:203,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:204,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{16:62,17:63,27:205,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},o([15,34],[2,55],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ}),o($Ve,[2,58]),{37:206,44:$VQ},{30:[1,207]},{16:62,17:63,27:208,30:$Vi,32:$Vs,50:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:61},{15:[2,66],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[2,67],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[2,68],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},o($Ve,[2,39]),{10:210,36:$Va,37:209,44:$VQ},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V0,19:$V1,20:$V2,22:$V3,23:$V4,24:$V5,25:$V6,30:$V7,31:$V8,35:$V9,36:$Va,40:$Vb,41:$Vc,45:[1,211],46:$Vd},o($VV,[2,57]),{16:212,17:213,30:$VW,43:214},{16:216,17:217,30:$VW,43:218},{15:[2,50],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[2,51],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[2,52],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[2,53],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},{15:[2,54],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,72:$VJ},o($Ve,[2,59]),o($VM,[2,60]),o([15,29,34,72,73],[2,96],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI}),o($Ve,[2,40]),o($Ve,[2,41]),o($VV,[2,56]),{34:[1,219]},{34:[1,220]},{34:[1,221]},{26:$VO,48:$Vf,49:$Vg},{34:[1,222]},{34:[1,223]},{34:[1,224]},{37:225,44:$VQ},{37:226,44:$VQ},{37:227,44:$VQ},{37:228,44:$VQ},{37:229,44:$VQ},{37:230,44:$VQ},o($Ve,[2,44]),o($Ve,[2,45]),o($Ve,[2,46]),o($Ve,[2,47]),o($Ve,[2,48]),o($Ve,[2,49])],
defaultActions: {28:[2,1],64:[2,62],117:[2,63]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //Import expresiones
    const { Aritmetica, TipoAritmetica } = require('../Expresion/Aritmetica')
    const { Relacional, TipoRelacional } = require('../Expresion/Relacional')
    const { Logica, TipoLogica } = require('../Expresion/Logica')
    const { Type } = require('../Expresion/Retorno')
    const { Literal, TipoLiteral } = require('../Expresion/Literal')
    const { Acceso } = require('../Expresion/Acceso')

    //Import instrucciones
    const { Declaracion } = require('../Instruccion/Declaracion')
    const { Print } = require('../Instruccion/Print')
    const { Statement } = require('../Instruccion/Statement')
    const { If } = require('../Instruccion/If')
    const { While } = require('../Instruccion/While')
    const { Break } = require('../Instruccion/Break')
    const { Continue } = require('../Instruccion/Continue')
    const { Funcion } = require('../Instruccion/Funcion')
    const { LlamadaFuncion } = require('../Instruccion/LlamadaFuncion')
    const { Return } = require('../Instruccion/Return')
    const { Ternario } = require('../Instruccion/Ternario')
    const { Increment_Decrement } = require('../Instruccion/Increment_Decrement')
    const { Casteo, TipoCasteo } = require('../Instruccion/Casteo')

    //Import error
    const { Error_ } = require('../Error/Error')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 68;
break;
case 4:return 69;
break;
case 5:return 31;
break;
case 6:return 35;
break;
case 7:return 36;
break;
case 8:return 39;
break;
case 9:return 40;
break;
case 10:return 'SWITCH';
break;
case 11:return 41;
break;
case 12:return 18;
break;
case 13:return 19;
break;
case 14:return 'RETURN';
break;
case 15:return 46;
break;
case 16:return 20;
break;
case 17:return 22;
break;
case 18:return 23;
break;
case 19:return 24;
break;
case 20:return 25;
break;
case 21:return 67;
break;
case 22:return 66;
break;
case 23: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 24: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65; 
break;
case 25:return 30;
break;
case 26:return 32;
break;
case 27:return 34;
break;
case 28:return 44;
break;
case 29:return 45;
break;
case 30:return 56;
break;
case 31:return 59;
break;
case 32:return 61;
break;
case 33:return 58;                     
break;
case 34:return 60;
break;
case 35:return 57;
break;
case 36:return 26;
break;
case 37:return 72;
break;
case 38:return 63;
break;
case 39:return 62;
break;
case 40:return 64;
break;
case 41:return 29;
break;
case 42:return 73;
break;
case 43:return 15;
break;
case 44:return 48;
break;
case 45:return 51;
break;
case 46:return 49;
break;
case 47:return 50;
break;
case 48:return 52;
break;
case 49:return 53;
break;
case 50:return 54;
break;
case 51:return 55;
break;
case 52:return 5;
break;
case 53:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:\d+\.\d+\b)/i,/^(?:\d+\b)/i,/^(?:'.')/i,/^(?:("[^\"]*"))/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,18],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,30],$Vc=[1,27],$Vd=[1,29],$Ve=[1,28],$Vf=[1,31],$Vg=[5,20,21,22,24,25,26,27,31,33,37,38,42,46,48,51,52,53,56,57],$Vh=[1,39],$Vi=[1,44],$Vj=[1,54],$Vk=[1,69],$Vl=[1,60],$Vm=[1,62],$Vn=[1,63],$Vo=[1,64],$Vp=[1,65],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,76],$Vu=[1,80],$Vv=[8,28,30],$Vw=[8,36],$Vx=[1,111],$Vy=[1,98],$Vz=[1,97],$VA=[1,99],$VB=[1,100],$VC=[1,101],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[8,30,36,49,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$VN=[1,118],$VO=[1,119],$VP=[1,121],$VQ=[30,36],$VR=[5,20,21,22,24,25,26,27,31,33,37,38,41,42,46,48,51,52,53,56,57],$VS=[8,30,36,49,62,75,76],$VT=[8,30,36,49,62,63,64,69,70,71,72,73,74,75,76],$VU=[8,30,36,49,62,63,64,65,66,69,70,71,72,73,74,75,76],$VV=[8,30,36,49,62,69,70,75,76],$VW=[8,30,36,49,62,69,70,71,72,73,74,75,76],$VX=[1,182],$VY=[1,191],$VZ=[46,48,51],$V_=[2,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"inicio":6,"asignacion":7,"PUNTO_Y_COMA":8,"declaracion":9,"print":10,"if":11,"while":12,"do_while":13,"for":14,"switch":15,"funcion":16,"llamadaFuncion":17,"incremento":18,"decremento":19,"BREAK":20,"CONTINUE":21,"INT":22,"declaracion_multiple":23,"DOUBLE":24,"CHAR":25,"BOOLEAN":26,"STRING":27,"IGUAL":28,"expresion":29,"COMA":30,"IDENTIFICADOR":31,"casteos":32,"PRINT":33,"PAR_ABRE":34,"ListaExpr":35,"PAR_CIERRA":36,"PRINTLN":37,"IF":38,"statement":39,"elsE":40,"ELSE":41,"SWITCH":42,"LL_ABRE":43,"lista_case":44,"default":45,"LL_CIERRA":46,"case":47,"CASE":48,"DOSPUNTOS":49,"statement_case":50,"DEFAULT":51,"WHILE":52,"FOR":53,"incremento_sin_punto_y_coma":54,"decremento_sin_punto_y_coma":55,"DO":56,"FUNCTION":57,"parametros":58,"MAS_MAS":59,"MENOS_MENOS":60,"ternario":61,"QUESTION":62,"MENOS":63,"MAS":64,"POR":65,"DIVIDIR":66,"POTENCIA":67,"MODULO":68,"IGUAL_IGUAL":69,"DIFERENTE":70,"MAYOR_IGUAL":71,"MENOR_IGUAL":72,"MAYOR":73,"MENOR":74,"AND":75,"OR":76,"NOT":77,"CADENA":78,"ENTERO":79,"DECIMAL":80,"TRUE":81,"FALSE":82,"CARACTER":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTO_Y_COMA",20:"BREAK",21:"CONTINUE",22:"INT",24:"DOUBLE",25:"CHAR",26:"BOOLEAN",27:"STRING",28:"IGUAL",30:"COMA",31:"IDENTIFICADOR",33:"PRINT",34:"PAR_ABRE",36:"PAR_CIERRA",37:"PRINTLN",38:"IF",41:"ELSE",42:"SWITCH",43:"LL_ABRE",46:"LL_CIERRA",48:"CASE",49:"DOSPUNTOS",51:"DEFAULT",52:"WHILE",53:"FOR",56:"DO",57:"FUNCTION",59:"MAS_MAS",60:"MENOS_MENOS",62:"QUESTION",63:"MENOS",64:"MAS",65:"POR",66:"DIVIDIR",67:"POTENCIA",68:"MODULO",69:"IGUAL_IGUAL",70:"DIFERENTE",71:"MAYOR_IGUAL",72:"MENOR_IGUAL",73:"MAYOR",74:"MENOR",75:"AND",76:"OR",77:"NOT",78:"CADENA",79:"ENTERO",80:"DECIMAL",81:"TRUE",82:"FALSE",83:"CARACTER"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,4],[9,4],[9,4],[9,4],[9,4],[23,3],[23,1],[7,3],[7,3],[10,5],[10,5],[35,3],[35,1],[11,6],[40,2],[40,2],[40,0],[15,8],[44,2],[44,1],[47,4],[50,1],[50,0],[45,3],[45,0],[12,5],[14,9],[14,9],[14,9],[14,9],[14,9],[14,9],[13,6],[39,3],[39,2],[16,5],[16,6],[58,3],[58,1],[17,3],[17,4],[18,3],[19,3],[54,2],[55,2],[61,5],[32,4],[32,4],[32,4],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 41:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]
break;
case 16:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 17:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 18:
 this.$ = new Declaracion($$[$0], new Literal(0, TipoLiteral.ENTERO ,_$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column, 0, Type.ENTERO) 
break;
case 19:
 this.$ = new Declaracion($$[$0], new Literal(0.0, TipoLiteral.DOBLE ,_$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column, 0, Type.DOBLE) 
break;
case 20:
 this.$ = new Declaracion($$[$0], new Literal("\u0000", TipoLiteral.CARACTER ,_$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column, 0, Type.CARACTER) 
break;
case 21:
 this.$ = new Declaracion($$[$0], new Literal(true, TipoLiteral.BOOLEAN ,_$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column, 0, Type.BOOLEAN) 
break;
case 22:
 this.$ = new Declaracion($$[$0], new Literal("", TipoLiteral.CADENA ,_$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column, 0, Type.CADENA) 
break;
case 23:
 this.$ = new Declaracion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, Type.ENTERO) 
break;
case 24:
 this.$ = new Declaracion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, Type.DOBLE) 
break;
case 25:
 this.$ = new Declaracion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, Type.CARACTER) 
break;
case 26:
 this.$ = new Declaracion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, Type.BOOLEAN) 
break;
case 27:
 this.$ = new Declaracion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, 0, Type.CADENA) 
break;
case 28: case 34:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 29:
 this.$ = [$$[$0].toLowerCase()] 
break;
case 30: case 31:
 this.$ = new Declaracion([$$[$0-2].toLowerCase()], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, 1, $$[$0].tipo) 
break;
case 32:
 this.$ = new Print($$[$0-2], 0, _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 33:
 this.$ = new Print($$[$0-2], 1, _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 35: case 42: case 61:
 this.$ = [$$[$0]] 
break;
case 36:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 37: case 38: case 46: case 96: case 97: case 98:
 this.$ = $$[$0] 
break;
case 39: case 47:
 this.$ = null 
break;
case 40:
 
        console.log("Lista case: ",$$[$0-2],"\n"); 
        for (const i of $$[$0-2]) {
            console.log("Case: ",i.cuerpo); 
        }
        console.log("Default: ", $$[$0-1],"\n"); this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column) 
break;
case 43:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 44:
 this.$ = new Statement($$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 45:
 this.$ = new Statement([], _$[$0].first_line, _$[$0].first_column) 
break;
case 48:
 this.$ = new While($$[$0-2], $$[$0],  _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 49: case 50: case 51: case 52: case 53: case 54:
 this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column) 
break;
case 55:
 this.$ = new Do_While($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 56:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 57:
 this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 58:
 this.$ = new Funcion($$[$0-3], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 59:
 this.$ = new Funcion($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 60:
 $$[$0-2].push($$[$0]); this.$ =$$[$0-2] 
break;
case 62:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 64:
 this.$ = new Increment_Decrement($$[$0-2], new Acceso($$[$0-2].toLowerCase(), _$[$0-2].first_line, _$[$0-2].first_column), true, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 65:
this.$ = new Increment_Decrement($$[$0-2], new Acceso($$[$0-2].toLowerCase(), _$[$0-2].first_line, _$[$0-2].first_column), false, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 66:
 this.$ = new Increment_Decrement($$[$0-1], new Acceso($$[$0-1].toLowerCase(), _$[$0-1].first_line, _$[$0-1].first_column), true, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 67:
this.$ = new Increment_Decrement($$[$0-1], new Acceso($$[$0-1].toLowerCase(), _$[$0-1].first_line, _$[$0-1].first_column), false, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 68:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 69:
 this.$ = new Casteo(TipoCasteo.DOBLE, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 70:
 this.$ = new Casteo(TipoCasteo.CARACTER, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 71:
 this.$ = new Casteo(TipoCasteo.ENTERO, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 72:
 this.$ = new Aritmetica($$[$0], new Literal("-1", TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column), TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 73:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 74:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 75:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 76:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 77:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 78:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 79:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 80:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 81:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 82:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 83:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 84:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 85:
 this.$ = $$[$0-1] 
break;
case 86:
 this.$ = new Logica($$[$0-2], $$[$0], TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 87:
 this.$ = new Logica($$[$0-2], $$[$0], TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 88:
 this.$ = new Logica($$[$0], null, TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 89:
 this.$ = new Literal($$[$0], TipoLiteral.CADENA, _$[$0].first_line, _$[$0].first_column) 
break;
case 90:
 this.$ = new Literal($$[$0], TipoLiteral.ENTERO, _$[$0].first_line, _$[$0].first_column) 
break;
case 91:
 this.$ = new Literal($$[$0], TipoLiteral.DOBLE, _$[$0].first_line, _$[$0].first_column) 
break;
case 92: case 93:
 this.$ = new Literal($$[$0], TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column) 
break;
case 94:
 this.$ = new Literal($$[$0], TipoLiteral.CARACTER, _$[$0].first_line, _$[$0].first_column) 
break;
case 95:
 this.$ = new Acceso($$[$0].toLowerCase(), _$[$0].first_line, _$[$0].first_column) 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:$V5,27:$V6,31:$V7,33:$V8,37:$V9,38:$Va,42:$Vb,52:$Vc,53:$Vd,56:$Ve,57:$Vf},{1:[3]},{5:[1,32],6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:$V5,27:$V6,31:$V7,33:$V8,37:$V9,38:$Va,42:$Vb,52:$Vc,53:$Vd,56:$Ve,57:$Vf},o($Vg,[2,3]),{8:[1,34]},{8:[1,35]},o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),{8:[1,36]},o($Vg,[2,14]),o($Vg,[2,15]),{8:[1,37]},{8:[1,38]},{28:$Vh,34:[1,40],59:[1,41],60:[1,42]},{23:43,31:$Vi},{23:45,31:$Vi},{23:46,31:$Vi},{23:47,31:$Vi},{23:48,31:$Vi},{34:[1,49]},{34:[1,50]},{34:[1,51]},{34:[1,52]},{39:53,43:$Vj},{34:[1,55]},{34:[1,56]},{31:[1,57]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,13]),o($Vg,[2,16]),o($Vg,[2,17]),{29:58,31:$Vk,32:59,34:[1,61],54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:75,31:$Vk,34:$Vt,35:74,36:[1,73],54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{8:[1,77]},{8:[1,78]},{8:[2,18],28:[1,79],30:$Vu},o($Vv,[2,29]),{8:[2,19],28:[1,81],30:$Vu},{8:[2,20],28:[1,82],30:$Vu},{8:[2,21],28:[1,83],30:$Vu},{8:[2,22],28:[1,84],30:$Vu},{29:75,31:$Vk,34:$Vt,35:85,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:75,31:$Vk,34:$Vt,35:86,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:87,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:88,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{52:[1,89]},{4:90,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:$V5,27:$V6,31:$V7,33:$V8,37:$V9,38:$Va,42:$Vb,46:[1,91],52:$Vc,53:$Vd,56:$Ve,57:$Vf},{7:93,9:92,22:$V2,24:$V3,25:$V4,26:$V5,27:$V6,31:[1,94]},{29:95,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{34:[1,96]},o($Vw,[2,30],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vw,[2,31]),{29:112,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{22:[1,116],24:[1,114],25:[1,115],29:113,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:117,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},o($VM,[2,89]),o($VM,[2,90]),o($VM,[2,91]),o($VM,[2,92]),o($VM,[2,93]),o($VM,[2,94]),o($VM,[2,95],{59:$VN,60:$VO}),o($VM,[2,96]),o($VM,[2,97]),o($VM,[2,98]),{8:[2,62]},{30:$VP,36:[1,120]},o($VQ,[2,35],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{29:113,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},o($Vg,[2,64]),o($Vg,[2,65]),{29:122,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{31:[1,123]},{29:124,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:125,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:126,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:127,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{30:$VP,36:[1,128]},{30:$VP,36:[1,129]},{36:[1,130],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{36:[1,131],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{34:[1,132]},{6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:$V5,27:$V6,31:$V7,33:$V8,37:$V9,38:$Va,42:$Vb,46:[1,133],52:$Vc,53:$Vd,56:$Ve,57:$Vf},o($VR,[2,57]),{8:[1,134]},{8:[1,135]},{28:$Vh},{36:[1,136],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{31:[1,139],36:[1,137],58:138},{29:140,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:141,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:142,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:143,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:144,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:145,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:146,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:147,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:148,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:149,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:150,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:151,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:152,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:153,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:154,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},o($VM,[2,72]),{36:[1,155],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{36:[1,156]},{36:[1,157]},{36:[1,158]},o($VS,[2,88],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VM,[2,66]),o($VM,[2,67]),{8:[2,63]},{29:159,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{8:[2,23],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},o($Vv,[2,28]),{8:[2,24],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{8:[2,25],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{8:[2,26],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{8:[2,27],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{8:[1,160]},{8:[1,161]},{39:162,43:$Vj},{39:163,43:$Vj},{29:164,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},o($VR,[2,56]),{29:165,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:166,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{43:[1,167]},{39:168,43:$Vj},{30:[1,170],36:[1,169]},o($VQ,[2,61]),o($VT,[2,73],{65:$VA,66:$VB,67:$VC,68:$VD}),o($VT,[2,74],{65:$VA,66:$VB,67:$VC,68:$VD}),o($VU,[2,75],{67:$VC,68:$VD}),o($VU,[2,76],{67:$VC,68:$VD}),o($VM,[2,77]),o($VM,[2,78]),o($VV,[2,79],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VV,[2,80],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VW,[2,81],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD}),o($VW,[2,82],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD}),o($VW,[2,83],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD}),o($VW,[2,84],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD}),o($VS,[2,86],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o([8,30,36,49,62,76],[2,87],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK}),{49:[1,171],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},o($VM,[2,85]),{29:172,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:173,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},{29:174,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},o($VQ,[2,34],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vg,[2,32]),o($Vg,[2,33]),o($Vg,[2,39],{40:175,41:[1,176]}),o($Vg,[2,48]),{36:[1,177],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{8:[1,178],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{8:[1,179],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{44:180,47:181,48:$VX},o($Vg,[2,58]),{39:183,43:$Vj},{31:[1,184]},{29:185,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},o($Vw,[2,69],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vw,[2,70],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vw,[2,71],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vg,[2,36]),{11:187,38:$Va,39:186,43:$Vj},o($Vg,[2,55]),{7:190,31:$VY,54:188,55:189},{7:194,31:$VY,54:192,55:193},{45:195,46:[2,47],47:196,48:$VX,51:[1,197]},o($VZ,[2,42]),{29:198,31:$Vk,34:$Vt,54:71,55:72,61:70,63:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,82:$Vr,83:$Vs},o($Vg,[2,59]),o($VQ,[2,60]),o([8,30,36,49,62],[2,68],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vg,[2,37]),o($Vg,[2,38]),{36:[1,199]},{36:[1,200]},{36:[1,201]},{28:$Vh,59:$VN,60:$VO},{36:[1,202]},{36:[1,203]},{36:[1,204]},{46:[1,205]},o($VZ,[2,41]),{49:[1,206]},{49:[1,207],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{39:208,43:$Vj},{39:209,43:$Vj},{39:210,43:$Vj},{39:211,43:$Vj},{39:212,43:$Vj},{39:213,43:$Vj},o($Vg,[2,40]),{4:215,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:$V5,27:$V6,31:$V7,33:$V8,37:$V9,38:$Va,42:$Vb,46:$V_,50:214,52:$Vc,53:$Vd,56:$Ve,57:$Vf},o($VZ,$V_,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,4:215,50:216,20:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:$V5,27:$V6,31:$V7,33:$V8,37:$V9,38:$Va,42:$Vb,52:$Vc,53:$Vd,56:$Ve,57:$Vf}),o($Vg,[2,49]),o($Vg,[2,50]),o($Vg,[2,51]),o($Vg,[2,52]),o($Vg,[2,53]),o($Vg,[2,54]),{46:[2,46]},o($VZ,[2,44],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,6:33,20:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:$V5,27:$V6,31:$V7,33:$V8,37:$V9,38:$Va,42:$Vb,52:$Vc,53:$Vd,56:$Ve,57:$Vf}),o($VZ,[2,43])],
defaultActions: {32:[2,1],73:[2,62],120:[2,63],214:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //Import expresiones
    const { Aritmetica, TipoAritmetica } = require('../Expresion/Aritmetica')
    const { Relacional, TipoRelacional } = require('../Expresion/Relacional')
    const { Logica, TipoLogica } = require('../Expresion/Logica')
    const { Type } = require('../Expresion/Retorno')
    const { Literal, TipoLiteral } = require('../Expresion/Literal')
    const { Acceso } = require('../Expresion/Acceso')

    //Import instrucciones
    const { Declaracion } = require('../Instruccion/Declaracion')
    const { Print } = require('../Instruccion/Print')
    const { Statement } = require('../Instruccion/Statement')
    const { If } = require('../Instruccion/If')
    const { While } = require('../Instruccion/While')
    const { Do_While } = require('../Instruccion/Do_While')
    const { Switch } = require('../Instruccion/Switch')
    const { Case } = require('../Instruccion/Case')
    const { Break } = require('../Instruccion/Break')
    const { Continue } = require('../Instruccion/Continue')
    const { Funcion } = require('../Instruccion/Funcion')
    const { LlamadaFuncion } = require('../Instruccion/LlamadaFuncion')
    const { Return } = require('../Instruccion/Return')
    const { Ternario } = require('../Instruccion/Ternario')
    const { Increment_Decrement } = require('../Instruccion/Increment_Decrement')
    const { Casteo, TipoCasteo } = require('../Instruccion/Casteo')
    const { For } = require('../Instruccion/For')

    //Import error
    const { Error_ } = require('../Error/Error')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 81;
break;
case 4:return 82;
break;
case 5:return 33;
break;
case 6:return 37;
break;
case 7:return 38;
break;
case 8:return 41;
break;
case 9:return 56;
break;
case 10:return 52;
break;
case 11:return 42;
break;
case 12:return 48;
break;
case 13:return 51;
break;
case 14:return 53;
break;
case 15:return 20;
break;
case 16:return 21;
break;
case 17:return 'RETURN';
break;
case 18:return 57;
break;
case 19:return 22;
break;
case 20:return 24;
break;
case 21:return 25;
break;
case 22:return 26;
break;
case 23:return 27;
break;
case 24:return 80;
break;
case 25:return 79;
break;
case 26: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 83; 
break;
case 27: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 78; 
break;
case 28:return 31;
break;
case 29:return 34;
break;
case 30:return 36;
break;
case 31:return 43;
break;
case 32:return 46;
break;
case 33:return 69;
break;
case 34:return 72;
break;
case 35:return 74;
break;
case 36:return 71;                     
break;
case 37:return 73;
break;
case 38:return 70;
break;
case 39:return 28;
break;
case 40:return 62;
break;
case 41:return 76;
break;
case 42:return 75;
break;
case 43:return 77;
break;
case 44:return 30;
break;
case 45:return 49;
break;
case 46:return 8;
break;
case 47:return 59;
break;
case 48:return 64;
break;
case 49:return 60;
break;
case 50:return 63;
break;
case 51:return 65;
break;
case 52:return 66;
break;
case 53:return 67;
break;
case 54:return 68;
break;
case 55:return 5;
break;
case 56:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:\d+\.\d+\b)/i,/^(?:\d+\b)/i,/^(?:'.')/i,/^(?:("[^\"]*"))/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}